@page "/BlackJack"
@using System.Reflection.Metadata

<PageTitle>Black Jack</PageTitle>
<h1>Black Jack</h1>

<table>
    <tr>
        <td>
            <div>
                <p id=money>Available money: @p.money</p>
                <p id="bet"> Current Bet: @p.bet</p>
                <button class="btn btn-primary" id="inBet" name="inBet" @onclick="IncreaseBet">Bet +</button>
                <button class="btn btn-primary" id="deBet" name="deBet" @onclick="DecreaseBet">Bet -</button>
                <button class="btn btn-primary" id="startGame" name="startGame"  @onclick="StartGame">Start Game!</button>
            </div>
            <div  style="margin-bottom: 5%">
                <button class="btn btn-money" id="allIn" name="allIn" @onclick="AllIn">All In!</button>
                <button class="btn btn-money" id="Reset" name="ResetBet" @onclick="ResetBet">Reset Bet!</button>
            </div>
        </td>
    </tr>
    <tr>
        <td>
            <div>
                <p role="status" id="Player" style="text-align: left">Player score: @p.score Aces: @p.aceCount</p>
                <p role="status" id="Dealer" style="text-align: left">Dealer score: @dealer.score</p>
                <p role="status" id=announce style="text-align: left"> @announce</p>
                <button class="btn btn-primary" id="double" @onclick="_double">Double</button>
                <button class="btn btn-hit" id="hit" @onclick="Hit">Hit</button>
                <button class="btn btn-stand" id="stand" @onclick="Stand">Stand</button>
            </div>
        </td>
    </tr>
</table>



@code {
    bool gamelock;    
    Player p = new();
    Player dealer = new();
    string announce = "Please place a Bet!";
    bool disableAction = true;


    private void AllIn()
    {
        if (!gamelock)
        {
            while (p.money > 0.5)
            {
                IncreaseBet();
            }
        }
    }
    private void ResetBet()
    {
        if (!gamelock)
        {
            while (p.bet > 0.5)
            {
                DecreaseBet();
            }
        }
    }

    private void IncreaseBet()
    {
        if (!gamelock)
        {
            if (p.money > 0.5)
            {
                p.IncreaseBet();
            }
        }
    }
    private void DecreaseBet()
    {
        if (!gamelock)
        {
            if (p.bet > 0.5)
            {
                p.DecreaseBet();
            }
        }
    }

    private void Reset()
    {
        gamelock = true;
        disableAction = false;
        announce = "Game ongoing";
        p.score = 0;
        p.aceCount = 0;
        dealer.aceCount = 0;
        dealer.score = 0;
        dealer.hiddenCard = 0;
    }
    
    private async Task StartGame()
    {
        if (!gamelock)
        {
            if (p.bet != 0)
            {
                Reset();
                await p.AddPlayerCard();
                StateHasChanged();
                await dealer.AddPlayerCard();
                StateHasChanged();
                await p.AddPlayerCard();
                StateHasChanged();
                dealer.AddHiddenCard();
                if (dealer.score == 10)
                {
                    if (dealer.hiddenCard == 11)
                    {
                        await Stand();
                        return;
                    }
                }
                else if (dealer.score == 11)
                {
                    if (dealer.hiddenCard == 10)
                    {
                        await Stand();
                        return;
                    }
                }
                if (p.score == 21)
                {
                    //BlackJack
                    p.money += p.bet * 1.5;
                    announce = "Blackjack! Won: " + p.bet * 1.5;
                    gamelock = false;
                    disableAction = true;
                }
            }
            else
            {
                announce = "Please place a Bet";
            }
        }
    }
    
    private async Task Hit()
    {
        if (!disableAction)
        {
            await p.AddPlayerCard();
            StateHasChanged();

            if (p.score > 21)
            {
                if (p.aceCount > 0)
                {
                    p.aceCount--;
                    p.score -= 10;
                    return;
                }
                //Bust
                //Dealer wins
                announce = "Player has bust! Lost: " + p.bet;
                p.bet = 0;
                disableAction = true;
                await dealer.CalcHidden();
                StateHasChanged();
                gamelock = false;
            }
        }
    }
    
    private async Task Stand()
    {
        if(!disableAction)
        {
            disableAction = true;
            await dealer.CalcHidden();
            StateHasChanged();
            while (dealer.score < 17)
            {
                await dealer.AddPlayerCard();
                StateHasChanged();
            }
            if (dealer.score <= 21) {
                if (p.score < dealer.score)
                {
                    //Dealer wins
                    announce = "Dealer wins! Lost: " + p.bet;
                    p.bet = 0;
                    gamelock = false;
                    return;
                }
                if (p.score == dealer.score)
                {
                    //draw
                    announce = "Push!";
                    gamelock = false;
                    return;
                }
            }
            else
            {
                announce = "Dealer has bust! Won: " + p.bet;
                p.money += p.bet;
                gamelock = false;
                return;
            }
            //Player wins
            announce = "Player wins! Won: " + p.bet;
            p.money += p.bet;
            gamelock = false;
        }
    }
    
    private async Task _double()
    {
        if (p.bet <= p.money)
        {
            if (!disableAction)
            {
                p.money -= p.bet;
                p.bet *= 2;
                await Hit();
                StateHasChanged();
                await Stand();
                StateHasChanged();
                disableAction = true;
            }
        }
    }
}